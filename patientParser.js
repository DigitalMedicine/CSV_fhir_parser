var fs = require('fs');
const csv = require('csv-parser');
var adapter = require('./adapter.js');

const readCSV = async () => {
    const results = [];
    return new Promise((resolve, reject) => {
        fs.createReadStream('patients.csv')
            .pipe(csv())
            .on('data', (data) => results.push(data))
            .on('end', () => {resolve(results);});
    });
}


//create a FHIR patient resource from the json patient, need to check generated
function createFhirPatient(jsonPatient){
    const patient = {
        "resourceType": "Patient",
        "id": jsonPatient.Id,
        "meta": {
            "profile": [ "http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient" ]
        },
        "text": {
            "status": "generated",
            "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">Generated by fedevale</div>"
        },
        "active": true,
        "name": [
            {
                "use": "official",
                "text": jsonPatient.FIRST + " " + jsonPatient.LAST,
                "family": jsonPatient.LAST,
                "given": [
                    jsonPatient.FIRST
                ],
                "prefix": [
                    jsonPatient.PREFIX
                ],
                "suffix": [
                    jsonPatient.SUFFIX
                ],
                "period": {
                    "start": jsonPatient.BIRTHDATE,
                    "end": jsonPatient.DEATHDATE
                }
            }
        ],

    };

    let resource = {
        "resource": patient
    }

    return resource;
}

var config = {
    baseUrl: 'http://hapi.fhir.org/baseR4'
}


//create a FHIR client
var client = fhir(config, adapter);




/*
client
    .search( {type: 'Patient', query: { 'birthdate': '1974' }})
    .then(function(res){
        var bundle = res.data;
        var count = (bundle.entry && bundle.entry.length) || 0;
        console.log("# Patients born in 1974: ", count);
    })
    .catch(function(res){
        //Error responses
        if (res.status){
            console.log('Error', res.status);
        }

        //Errors
        if (res.message){
            console.log('Error', res.message);
        }
    });
    */

// ... (your existing code)
test = fhir.read({type: 'Patient', patient: '8673ee4f-e2ab-4077-ba55-4980f408773e'})
console.log(test);

readCSV().then((data) => {
    const pat1 = createFhirPatient(data[0]);
    console.log(pat1);
    
    // Use a Promise to ensure that the subsequent code is executed after client.create
    new Promise((resolve, reject) => {
        client.create(
            pat1,
            function (createdPatient) {
                console.log("culo");
                console.log(createdPatient.id);
                resolve(createdPatient.id); // Resolve with the created patient ID
            },
            function (error) {
                console.error("Error in create operation:", error);
                reject(error);
            }
        );
    })
    .then((createdPatientId) => {
        // Continue with the rest of your code here
        return client.search({ type: 'Patient', query: { 'id': createdPatientId } });
    })
    .then((res) => {
        var bundle = res.data;
        console.log(bundle);
    })
    .catch((error) => {
        // Error handling for the entire chain of operations
        console.error("Error in the entire chain:", error);
    });
});

